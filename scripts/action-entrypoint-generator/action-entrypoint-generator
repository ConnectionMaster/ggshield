#!/usr/bin/env python
"""
Generate the entrypoint.sh files for our GitHub actions.
"""
import argparse
import sys
from pathlib import Path


TEMPLATE = """#!/usr/bin/env bash
set -euo pipefail
# AUTOGENERATED FILE, DO NOT EDIT!
# This file has been generated by the `action-entrypoint-generator` script
# defined in `scripts/action-entrypoint-generator`. To make changes to this
# file, modify the script and rerun it.

# GitHub overrides $HOME. Set it back to the home directory of our `app` user,
# otherwise the call to `git config` fails.
export HOME=/home/app

# Mark the current directory as safe. If we don't do this, git commands fail
# because the source in $PWD is owned by a different user than our `app` user.
git config --global --add safe.directory "$PWD"

@UPDATE_GGSHIELD@
args=("$@")
@COMMAND@
"""

# This script contains the code used by the unstable actions to update ggshield
UPDATE_GGSHIELD_CODE = (Path(__file__).parent / "update-ggshield.sh").read_text()

COMMAND_FOR_VERTICAL = {
    "secret": "ggshield secret scan -v ${args[@]} ci",
    "iac": "ggshield iac scan -v ${args[@]}",
}

DEFAULT_OUTPUT_DIR = Path(__file__).parent.parent.parent


def generate(base_output_dir: Path, stable: bool, vertical: str):
    dct = {
        "UPDATE_GGSHIELD": "" if stable else UPDATE_GGSHIELD_CODE,
        "COMMAND": COMMAND_FOR_VERTICAL[vertical],
    }
    content = TEMPLATE
    for key, value in dct.items():
        content = content.replace(f"@{key}@", value)

    output_dir = (
        base_output_dir / ("actions" if stable else "actions-unstable") / vertical
    )
    output_dir.mkdir(exist_ok=True, parents=True)
    output_file = output_dir / "entrypoint.sh"
    print(f"Creating {output_file}")
    output_file.write_text(content)


def main():
    assert (DEFAULT_OUTPUT_DIR / "actions").exists()

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter, description=__doc__
    )

    parser.add_argument(
        "-o",
        "--output",
        default=DEFAULT_OUTPUT_DIR,
        help="write actions to OUTPUT_DIR",
        metavar="OUTPUT_DIR",
    )

    args = parser.parse_args()

    output_dir = Path(args.output)
    assert output_dir.is_dir()
    for stable in False, True:
        for vertical in COMMAND_FOR_VERTICAL.keys():
            generate(output_dir, stable=stable, vertical=vertical)

    return 0


if __name__ == "__main__":
    sys.exit(main())
