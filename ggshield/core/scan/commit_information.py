import re
from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional

from ggshield.utils.git_shell import git


_INFO_HEADER_REGEX = re.compile(
    r"Author:\s(?P<author>.+?) <(?P<email>.*?)>\nDate:\s+(?P<date>.+)?\n"
)


@dataclass
class CommitInformation:
    author: str
    email: str
    date: str
    paths: List[Path]

    @staticmethod
    def from_patch_header(header: str) -> "CommitInformation":
        """
        Parse a patch header, as produced by `git show --raw -z --name-only`.

        Output format looks like this:

        ```
        commit: $SHA
        Author: $NAME <$EMAIL>
        Date: $DATE

             $SUBJECT

             $BODY
        $FILE1\0$FILE2\0
        ```

        If the commit is empty the last line is absent and the header ends with `\n`.
        """
        if header[-1] == "\0":
            # Usual commit, with files in it
            last_nl_index = header.rfind("\n")
            assert last_nl_index != -1, header

            info_block = header[:last_nl_index]
            names_line = header[last_nl_index + 1 :]
            paths = _paths_from_name_only_line(names_line)
        else:
            # Empty commit
            info_block = header
            paths = []

        match = _INFO_HEADER_REGEX.search(info_block)
        assert match is not None, info_block

        return CommitInformation(**match.groupdict(), paths=paths)

    @staticmethod
    def from_staged(cwd: Optional[Path] = None) -> "CommitInformation":
        output = git(["diff", "--staged", "-z", "--name-only"], cwd=cwd)
        paths = _paths_from_name_only_line(output)
        return CommitInformation(author="", email="", date="", paths=paths)

    @staticmethod
    def from_sha(sha: str, cwd: Optional[Path] = None) -> "CommitInformation":
        header = git(["show", "--raw", "-z", "--name-only", sha], cwd=cwd)
        return CommitInformation.from_patch_header(header)


def _paths_from_name_only_line(text: str) -> List[Path]:
    """
    Parse a line generated by `git show` or `git diff` with the `--name-only -z`
    options.

    Filenames end with a \0, including the last one.

    Return a list of paths.
    """
    return [Path(x) for x in text.rstrip("\0").split("\0")]
